import { test, expect } from '@playwright/test'

test.describe('Connect Button Control (default)', () => {
  test('Loads with expected visuals', async ({ page }) => {
    await page.goto('./examples/components/ConnectButtonControl/default')
    await page.waitForURL('*/**/examples/components/ConnectButtonControl/default')
    await expect(page.getByRole('heading', { name: 'Connect Button Control (default example)' })).toBeVisible()
    const buttonControl = page.getByTestId('connect-button-control')
    await expect(buttonControl).toBeVisible()
    const leftButtons = buttonControl.getByTestId('left-buttons')
    await expect(leftButtons).toBeVisible()
    await expect(leftButtons.getByRole('button', { name: 'Left Button 1' })).toBeVisible()
    await expect(leftButtons.getByRole('button', { name: 'Left Button 2' })).toBeVisible()
    const rightButtons = buttonControl.getByTestId('right-buttons')
    await expect(rightButtons).toBeVisible()
    await expect(rightButtons.getByRole('button', { name: 'Right Button 1' })).toBeVisible()
    await expect(rightButtons.getByRole('button', { name: 'Right Button 2' })).toBeVisible()
  })
  test('Loading mechanism works as expected', async ({ page }) => {
    await page.goto('./examples/components/ConnectButtonControl/default')
    await page.waitForURL('*/**/examples/components/ConnectButtonControl/default')
    await expect(page.getByRole('heading', { name: 'Connect Button Control (default example)' })).toBeVisible()
    const buttonControl = page.getByTestId('connect-button-control')
    const leftButtons = buttonControl.getByTestId('left-buttons')
    const rightButtons = buttonControl.getByTestId('right-buttons')
    const leftButton1 = leftButtons.getByRole('button', { name: 'Left Button 1' })
    const leftButton2 = leftButtons.getByRole('button', { name: 'Left Button 2' })
    const rightButton1 = rightButtons.getByRole('button', { name: 'Right Button 1' })
    const rightButton2 = rightButtons.getByRole('button', { name: 'Right Button 2' })
    await leftButton1.click()
    expect(leftButton1).toHaveAttribute('disabled')
    expect(leftButton1.locator('span').first()).toHaveClass('iconify i-mdi:loading shrink-0 size-5 animate-spin')
    expect(leftButton2).toHaveAttribute('disabled')
    expect(leftButton2.locator('span').first()).not.toHaveClass('iconify i-mdi:loading shrink-0 size-5 animate-spin')
    expect(rightButton1).toHaveAttribute('disabled')
    expect(rightButton1.locator('span').first()).not.toHaveClass('iconify i-mdi:loading shrink-0 size-5 animate-spin')
    expect(rightButton2).toHaveAttribute('disabled')
    expect(rightButton2.locator('span').first()).not.toHaveClass('iconify i-mdi:loading shrink-0 size-5 animate-spin')
  })
  test('Error text works as expected', async ({ page }) => {
    await page.goto('./examples/components/ConnectButtonControl/default')
    await page.waitForURL('*/**/examples/components/ConnectButtonControl/default')
    await expect(page.getByRole('heading', { name: 'Connect Button Control (default example)' })).toBeVisible()
    const buttonControl = page.getByTestId('connect-button-control')
    const rightButtons = buttonControl.getByTestId('right-buttons')
    const leftButtons = buttonControl.getByTestId('left-buttons')
    const leftButton2 = leftButtons.getByRole('button', { name: 'Left Button 2' })
    const rightButton1 = rightButtons.getByRole('button', { name: 'Right Button 1' })
    const rightButton2 = rightButtons.getByRole('button', { name: 'Right Button 2' })
    // Side error text on the left
    const sideLeftErrorText = leftButtons.getByText('Alert text left side')
    await expect(sideLeftErrorText).not.toBeVisible()
    await leftButton2.click()
    await expect(sideLeftErrorText).toBeVisible()
    // Side error text on the right
    const sideRightErrorText = rightButtons.getByText('Alert text right side')
    await expect(sideRightErrorText).not.toBeVisible()
    await rightButton1.click()
    await expect(sideRightErrorText).toBeVisible()
    // Under button error text
    const buttonWrappers = await rightButtons.getByTestId('button-wrapper').all()
    expect(buttonWrappers.length).toBe(2)
    const underneathErrorText = buttonWrappers[1].getByText('Alert text underneath')
    await expect(underneathErrorText).not.toBeVisible()
    await rightButton2.click()
    await expect(underneathErrorText).toBeVisible()
  })
})
